<?php

/**
 * This file is part of the Flaphl package.
 * 
 * (c) Jade Phyressi <jade@flaphl.com>
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Flaphl\Element\Injection\Dumper;

use Flaphl\Element\Injection\ContainerBuilder;
use Flaphl\Element\Injection\Exception\ContainerException;

/**
 * Abstract base class for container dumpers.
 * 
 * Provides common functionality for all dumper implementations,
 * including validation and utility methods.
 * 
 * @package Flaphl\Element\Injection\Dumper
 * @author Jade Phyressi <jade@flaphl.com>
 */
abstract class Dumper implements DumperInterface
{
    /**
     * @var array<string, mixed> Default dumper options.
     */
    protected array $defaultOptions = [
        'class' => 'CompiledContainer',
        'namespace' => 'Flaphl\\Generated',
        'base_class' => 'Flaphl\\Element\\Injection\\Container',
        'file_header' => '',
        'debug' => false,
        'inline_factories' => true,
        'inline_class_loader' => true,
        'preload_classes' => true,
    ];

    /**
     * Dump the container configuration.
     * 
     * @param ContainerBuilder $container The container to dump.
     * @param array<string, mixed> $options Dumper-specific options.
     * @return string The dumped container configuration.
     * @throws ContainerException If dumping fails.
     */
    public function dump(ContainerBuilder $container, array $options = []): string
    {
        if (!$this->isSupported($container)) {
            throw new ContainerException(sprintf(
                'Container dumping with "%s" is not supported.',
                static::class
            ));
        }

        $options = array_merge($this->defaultOptions, $options);
        
        return $this->doDump($container, $options);
    }

    /**
     * Check if dumping is supported for the given container.
     * 
     * @param ContainerBuilder $container The container to check.
     * @return bool True if dumping is supported.
     */
    public function isSupported(ContainerBuilder $container): bool
    {
        return true; // Base implementation supports all containers
    }

    /**
     * Generate a unique hash for the container configuration.
     * 
     * @param ContainerBuilder $container The container to hash.
     * @return string A unique hash representing the container state.
     */
    protected function generateHash(ContainerBuilder $container): string
    {
        // Create a hash based on service definitions and parameters
        $data = [
            'services' => array_keys($container->getDefinitions()),
            'parameters' => $container->getParameterBag()->all(),
            'tags' => $container->findTaggedServiceIds('*'),
        ];

        return hash('sha256', serialize($data));
    }

    /**
     * Escape a string for use in the target format.
     * 
     * @param string $string The string to escape.
     * @return string The escaped string.
     */
    abstract protected function escape(string $string): string;

    /**
     * Perform the actual dumping logic.
     * 
     * @param ContainerBuilder $container The container to dump.
     * @param array<string, mixed> $options Merged dumper options.
     * @return string The dumped container configuration.
     */
    abstract protected function doDump(ContainerBuilder $container, array $options): string;

    /**
     * Validate dumper options.
     * 
     * @param array<string, mixed> $options The options to validate.
     * @throws ContainerException If options are invalid.
     */
    protected function validateOptions(array $options): void
    {
        $requiredOptions = ['class', 'namespace'];
        
        foreach ($requiredOptions as $option) {
            if (!isset($options[$option]) || !is_string($options[$option])) {
                throw new ContainerException(sprintf(
                    'Option "%s" must be a non-empty string.',
                    $option
                ));
            }
        }

        if (!preg_match('/^[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*$/', $options['class'])) {
            throw new ContainerException(sprintf(
                'Class name "%s" is not valid.',
                $options['class']
            ));
        }
    }

    /**
     * Generate a file header comment.
     * 
     * @param array<string, mixed> $options Dumper options.
     * @return string The file header.
     */
    protected function generateFileHeader(array $options): string
    {
        $header = $options['file_header'] ?? '';
        
        if ($header) {
            return $header . "\n\n";
        }

        return sprintf(
            "/**\n * This file has been auto-generated by the Flaphl Dependency Injection Element.\n * \n * @generated at %s\n */\n\n",
            date('Y-m-d H:i:s')
        );
    }
}
